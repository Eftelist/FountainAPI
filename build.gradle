plugins {
    id "java"
    id "maven"
}

ext.versionSignature = rawComputeVersionSignature()

group = 'org.fountainmc'
version = '0.1.0-alpha1-SNAPSHOT'

description = """FountainAPI"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    maven { url "https://repo.techcable.net/content/groups/public/" }
}
dependencies {
    compile 'com.google.guava:guava:19.0'
    compile 'com.google.code.gson:gson:2.6.2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-junit:2.0.0.0'
    compileOnly 'com.google.code.findbugs:jsr305:1.3.9'
}

String rawComputeVersionSignature() {
    def version = project.version.toString()
    if (!version.endsWith("-SNAPSHOT")) {
        // If it's not a snapshot version, there's nothing to do
        return version
    }
    def versionBase = version.replace("-SNAPSHOT", "")
    // Determine the current git commit
    // Determine if there are uncommitted changes
    def prog = "git status --porcelain=1".execute()
    def isClean = prog.text.allWhitespace
    assert prog.waitFor() == 0, "Failed to execute git status!"
    /*
     * NOTE: Prefer the short option over manual slicing since it handles uniqueness.
     * If we ever run into hash collisions in the first few chars, it'll still work.
     */
    prog = "git rev-parse --short HEAD".execute()
    def currentCommit = prog.text.trim()
    assert prog.waitFor() == 0, "Failed to execute git rev-parse!"
    def statusText = isClean ? "dev" : "dirty"
    return "$versionBase-$statusText-$currentCommit"
}
